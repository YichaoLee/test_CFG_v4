(set-logic QF_NRA)
(declare-fun main.retval.0 () Int)
(declare-fun main.IN.0 () Real)
(declare-fun main.x.0 () Real)
(declare-fun main.retval/0 () Int)
(declare-fun main.%0 () Real)
(declare-fun main.cmp () Int)
(declare-fun main.%1 () Real)
(declare-fun main.cmp1 () Int)
(declare-fun main.%2 () Int)
(declare-fun main.land.ext () Int)
(declare-fun main.%3 () Real)
(declare-fun main.%4 () Real)
(declare-fun main.call () Real)
(declare-fun f.x () Real)
(declare-fun f.x.addr.0 () Real)
(declare-fun f.%0 () Real)
(declare-fun f.%1 () Real)
(declare-fun f.%2 () Real)
(declare-fun f.mul () Real)
(declare-fun f.%3 () Real)
(declare-fun f.mul1 () Real)
(declare-fun f.div () Real)
(declare-fun f.sub () Real)
(declare-fun f.%4 () Real)
(declare-fun f.%5 () Real)
(declare-fun f.mul2 () Real)
(declare-fun f.%6 () Real)
(declare-fun f.mul3 () Real)
(declare-fun f.%7 () Real)
(declare-fun f.mul4 () Real)
(declare-fun f.%8 () Real)
(declare-fun f.mul5 () Real)
(declare-fun f.div6 () Real)
(declare-fun f.add () Real)
(declare-fun f.%9 () Real)
(declare-fun f.%10 () Real)
(declare-fun f.mul7 () Real)
(declare-fun f.%11 () Real)
(declare-fun f.mul8 () Real)
(declare-fun f.%12 () Real)
(declare-fun f.mul9 () Real)
(declare-fun f.%13 () Real)
(declare-fun f.mul10 () Real)
(declare-fun f.%14 () Real)
(declare-fun f.mul11 () Real)
(declare-fun f.%15 () Real)
(declare-fun f.mul12 () Real)
(declare-fun f.div13 () Real)
(declare-fun f.add14 () Real)
(declare-fun main.%5 () Real)
(declare-fun main.call2 () Real)
(declare-fun fp.x () Real)
(declare-fun fp.x.addr.0 () Real)
(declare-fun fp.%0 () Real)
(declare-fun fp.%1 () Real)
(declare-fun fp.mul () Real)
(declare-fun fp.div () Real)
(declare-fun fp.sub () Real)
(declare-fun fp.%2 () Real)
(declare-fun fp.%3 () Real)
(declare-fun fp.mul1 () Real)
(declare-fun fp.%4 () Real)
(declare-fun fp.mul2 () Real)
(declare-fun fp.%5 () Real)
(declare-fun fp.mul3 () Real)
(declare-fun fp.div4 () Real)
(declare-fun fp.add () Real)
(declare-fun fp.%6 () Real)
(declare-fun fp.%7 () Real)
(declare-fun fp.mul5 () Real)
(declare-fun fp.%8 () Real)
(declare-fun fp.mul6 () Real)
(declare-fun fp.%9 () Real)
(declare-fun fp.mul7 () Real)
(declare-fun fp.%10 () Real)
(declare-fun fp.mul8 () Real)
(declare-fun fp.%11 () Real)
(declare-fun fp.mul9 () Real)
(declare-fun fp.div10 () Real)
(declare-fun fp.add11 () Real)
(declare-fun main.div () Real)
(declare-fun main.sub () Real)
(declare-fun main.%6 () Real)
(declare-fun main.%7 () Real)
(declare-fun main.call3 () Real)
(declare-fun f.t1.x () Real)
(declare-fun f.t1.x.addr.0 () Real)
(declare-fun f.t1.%0 () Real)
(declare-fun f.t1.%1 () Real)
(declare-fun f.t1.%2 () Real)
(declare-fun f.t1.mul () Real)
(declare-fun f.t1.%3 () Real)
(declare-fun f.t1.mul1 () Real)
(declare-fun f.t1.div () Real)
(declare-fun f.t1.sub () Real)
(declare-fun f.t1.%4 () Real)
(declare-fun f.t1.%5 () Real)
(declare-fun f.t1.mul2 () Real)
(declare-fun f.t1.%6 () Real)
(declare-fun f.t1.mul3 () Real)
(declare-fun f.t1.%7 () Real)
(declare-fun f.t1.mul4 () Real)
(declare-fun f.t1.%8 () Real)
(declare-fun f.t1.mul5 () Real)
(declare-fun f.t1.div6 () Real)
(declare-fun f.t1.add () Real)
(declare-fun f.t1.%9 () Real)
(declare-fun f.t1.%10 () Real)
(declare-fun f.t1.mul7 () Real)
(declare-fun f.t1.%11 () Real)
(declare-fun f.t1.mul8 () Real)
(declare-fun f.t1.%12 () Real)
(declare-fun f.t1.mul9 () Real)
(declare-fun f.t1.%13 () Real)
(declare-fun f.t1.mul10 () Real)
(declare-fun f.t1.%14 () Real)
(declare-fun f.t1.mul11 () Real)
(declare-fun f.t1.%15 () Real)
(declare-fun f.t1.mul12 () Real)
(declare-fun f.t1.div13 () Real)
(declare-fun f.t1.add14 () Real)
(declare-fun main.%8 () Real)
(declare-fun main.call4 () Real)
(declare-fun fp.t1.x () Real)
(declare-fun fp.t1.x.addr.0 () Real)
(declare-fun fp.t1.%0 () Real)
(declare-fun fp.t1.%1 () Real)
(declare-fun fp.t1.mul () Real)
(declare-fun fp.t1.div () Real)
(declare-fun fp.t1.sub () Real)
(declare-fun fp.t1.%2 () Real)
(declare-fun fp.t1.%3 () Real)
(declare-fun fp.t1.mul1 () Real)
(declare-fun fp.t1.%4 () Real)
(declare-fun fp.t1.mul2 () Real)
(declare-fun fp.t1.%5 () Real)
(declare-fun fp.t1.mul3 () Real)
(declare-fun fp.t1.div4 () Real)
(declare-fun fp.t1.add () Real)
(declare-fun fp.t1.%6 () Real)
(declare-fun fp.t1.%7 () Real)
(declare-fun fp.t1.mul5 () Real)
(declare-fun fp.t1.%8 () Real)
(declare-fun fp.t1.mul6 () Real)
(declare-fun fp.t1.%9 () Real)
(declare-fun fp.t1.mul7 () Real)
(declare-fun fp.t1.%10 () Real)
(declare-fun fp.t1.mul8 () Real)
(declare-fun fp.t1.%11 () Real)
(declare-fun fp.t1.mul9 () Real)
(declare-fun fp.t1.div10 () Real)
(declare-fun fp.t1.add11 () Real)
(declare-fun main.div5 () Real)
(declare-fun main.sub6 () Real)
(declare-fun main.%9 () Real)
(declare-fun main.%10 () Real)
(declare-fun main.call7 () Real)
(declare-fun f.t2.x () Real)
(declare-fun f.t2.x.addr.0 () Real)
(declare-fun f.t2.%0 () Real)
(declare-fun f.t2.%1 () Real)
(declare-fun f.t2.%2 () Real)
(declare-fun f.t2.mul () Real)
(declare-fun f.t2.%3 () Real)
(declare-fun f.t2.mul1 () Real)
(declare-fun f.t2.div () Real)
(declare-fun f.t2.sub () Real)
(declare-fun f.t2.%4 () Real)
(declare-fun f.t2.%5 () Real)
(declare-fun f.t2.mul2 () Real)
(declare-fun f.t2.%6 () Real)
(declare-fun f.t2.mul3 () Real)
(declare-fun f.t2.%7 () Real)
(declare-fun f.t2.mul4 () Real)
(declare-fun f.t2.%8 () Real)
(declare-fun f.t2.mul5 () Real)
(declare-fun f.t2.div6 () Real)
(declare-fun f.t2.add () Real)
(declare-fun f.t2.%9 () Real)
(declare-fun f.t2.%10 () Real)
(declare-fun f.t2.mul7 () Real)
(declare-fun f.t2.%11 () Real)
(declare-fun f.t2.mul8 () Real)
(declare-fun f.t2.%12 () Real)
(declare-fun f.t2.mul9 () Real)
(declare-fun f.t2.%13 () Real)
(declare-fun f.t2.mul10 () Real)
(declare-fun f.t2.%14 () Real)
(declare-fun f.t2.mul11 () Real)
(declare-fun f.t2.%15 () Real)
(declare-fun f.t2.mul12 () Real)
(declare-fun f.t2.div13 () Real)
(declare-fun f.t2.add14 () Real)
(declare-fun main.%11 () Real)
(declare-fun main.call8 () Real)
(declare-fun fp.t2.x () Real)
(declare-fun fp.t2.x.addr.0 () Real)
(declare-fun fp.t2.%0 () Real)
(declare-fun fp.t2.%1 () Real)
(declare-fun fp.t2.mul () Real)
(declare-fun fp.t2.div () Real)
(declare-fun fp.t2.sub () Real)
(declare-fun fp.t2.%2 () Real)
(declare-fun fp.t2.%3 () Real)
(declare-fun fp.t2.mul1 () Real)
(declare-fun fp.t2.%4 () Real)
(declare-fun fp.t2.mul2 () Real)
(declare-fun fp.t2.%5 () Real)
(declare-fun fp.t2.mul3 () Real)
(declare-fun fp.t2.div4 () Real)
(declare-fun fp.t2.add () Real)
(declare-fun fp.t2.%6 () Real)
(declare-fun fp.t2.%7 () Real)
(declare-fun fp.t2.mul5 () Real)
(declare-fun fp.t2.%8 () Real)
(declare-fun fp.t2.mul6 () Real)
(declare-fun fp.t2.%9 () Real)
(declare-fun fp.t2.mul7 () Real)
(declare-fun fp.t2.%10 () Real)
(declare-fun fp.t2.mul8 () Real)
(declare-fun fp.t2.%11 () Real)
(declare-fun fp.t2.mul9 () Real)
(declare-fun fp.t2.div10 () Real)
(declare-fun fp.t2.add11 () Real)
(declare-fun main.div9 () Real)
(declare-fun main.sub10 () Real)
(declare-fun main.%12 () Real)
(declare-fun main.conv () Real)
(declare-fun main.cmp11 () Int)


(assert (= main.retval/0 0))
(assert (and (< main.IN.0 1.4) (> main.IN.0 -1.4)))
(assert (= main.IN.0 main.%3))
(assert (= main.IN.0 main.%4))
(assert (= main.%4 f.x))
(assert (= f.x f.%0))
(assert (= f.x f.%1))
(assert (= f.x f.%2))
(assert (= f.mul (* f.%2 f.%1)))
(assert (= f.x f.%3))
(assert (= f.mul1 (* f.%3 f.mul)))
(assert (= f.div (/ f.mul1 6)))
(assert (= f.sub (+ f.%0 (* -1 f.div))))
(assert (= f.x f.%4))
(assert (= f.x f.%5))
(assert (= f.mul2 (* f.%5 f.%4)))
(assert (= f.x f.%6))
(assert (= f.mul3 (* f.%6 f.mul2)))
(assert (= f.x f.%7))
(assert (= f.mul4 (* f.%7 f.mul3)))
(assert (= f.x f.%8))
(assert (= f.mul5 (* f.%8 f.mul4)))
(assert (= f.div6 (/ f.mul5 120)))
(assert (= f.add (+ f.div6 f.sub)))
(assert (= f.x f.%9))
(assert (= f.x f.%10))
(assert (= f.mul7 (* f.%10 f.%9)))
(assert (= f.x f.%11))
(assert (= f.mul8 (* f.%11 f.mul7)))
(assert (= f.x f.%12))
(assert (= f.mul9 (* f.%12 f.mul8)))
(assert (= f.x f.%13))
(assert (= f.mul10 (* f.%13 f.mul9)))
(assert (= f.x f.%14))
(assert (= f.mul11 (* f.%14 f.mul10)))
(assert (= f.x f.%15))
(assert (= f.mul12 (* f.%15 f.mul11)))
(assert (= f.div13 (/ f.mul12 5040)))
(assert (= f.add14 (+ f.div13 f.add)))
(assert (= main.call f.add14))
(assert (= main.IN.0 main.%5))
(assert (= main.%5 fp.x))
(assert (= fp.x fp.%0))
(assert (= fp.x fp.%1))
(assert (= fp.mul (* fp.%1 fp.%0)))
(assert (= fp.div (/ fp.mul 2)))
(assert (= fp.sub (+ 1 (* -1 fp.div))))
(assert (= fp.x fp.%2))
(assert (= fp.x fp.%3))
(assert (= fp.mul1 (* fp.%3 fp.%2)))
(assert (= fp.x fp.%4))
(assert (= fp.mul2 (* fp.%4 fp.mul1)))
(assert (= fp.x fp.%5))
(assert (= fp.mul3 (* fp.%5 fp.mul2)))
(assert (= fp.div4 (/ fp.mul3 24)))
(assert (= fp.add (+ fp.div4 fp.sub)))
(assert (= fp.x fp.%6))
(assert (= fp.x fp.%7))
(assert (= fp.mul5 (* fp.%7 fp.%6)))
(assert (= fp.x fp.%8))
(assert (= fp.mul6 (* fp.%8 fp.mul5)))
(assert (= fp.x fp.%9))
(assert (= fp.mul7 (* fp.%9 fp.mul6)))
(assert (= fp.x fp.%10))
(assert (= fp.mul8 (* fp.%10 fp.mul7)))
(assert (= fp.x fp.%11))
(assert (= fp.mul9 (* fp.%11 fp.mul8)))
(assert (= fp.div10 (/ fp.mul9 720)))
(assert (= fp.add11 (+ fp.div10 fp.add)))
(assert (= main.call2 fp.add11))
(assert (= main.div (/ main.call main.call2)))
(assert (= main.sub (+ main.%3 (* -1 main.div))))
(assert (= main.sub main.%6))
(assert (= main.sub main.%7))
(assert (= main.%7 f.t1.x))
(assert (= f.t1.x f.t1.%0))
(assert (= f.t1.x f.t1.%1))
(assert (= f.t1.x f.t1.%2))
(assert (= f.t1.mul (* f.t1.%2 f.t1.%1)))
(assert (= f.t1.x f.t1.%3))
(assert (= f.t1.mul1 (* f.t1.%3 f.t1.mul)))
(assert (= f.t1.div (/ f.t1.mul1 6)))
(assert (= f.t1.sub (+ f.t1.%0 (* -1 f.t1.div))))
(assert (= f.t1.x f.t1.%4))
(assert (= f.t1.x f.t1.%5))
(assert (= f.t1.mul2 (* f.t1.%5 f.t1.%4)))
(assert (= f.t1.x f.t1.%6))
(assert (= f.t1.mul3 (* f.t1.%6 f.t1.mul2)))
(assert (= f.t1.x f.t1.%7))
(assert (= f.t1.mul4 (* f.t1.%7 f.t1.mul3)))
(assert (= f.t1.x f.t1.%8))
(assert (= f.t1.mul5 (* f.t1.%8 f.t1.mul4)))
(assert (= f.t1.div6 (/ f.t1.mul5 120)))
(assert (= f.t1.add (+ f.t1.div6 f.t1.sub)))
(assert (= f.t1.x f.t1.%9))
(assert (= f.t1.x f.t1.%10))
(assert (= f.t1.mul7 (* f.t1.%10 f.t1.%9)))
(assert (= f.t1.x f.t1.%11))
(assert (= f.t1.mul8 (* f.t1.%11 f.t1.mul7)))
(assert (= f.t1.x f.t1.%12))
(assert (= f.t1.mul9 (* f.t1.%12 f.t1.mul8)))
(assert (= f.t1.x f.t1.%13))
(assert (= f.t1.mul10 (* f.t1.%13 f.t1.mul9)))
(assert (= f.t1.x f.t1.%14))
(assert (= f.t1.mul11 (* f.t1.%14 f.t1.mul10)))
(assert (= f.t1.x f.t1.%15))
(assert (= f.t1.mul12 (* f.t1.%15 f.t1.mul11)))
(assert (= f.t1.div13 (/ f.t1.mul12 5040)))
(assert (= f.t1.add14 (+ f.t1.div13 f.t1.add)))
(assert (= main.call3 f.t1.add14))
(assert (= main.sub main.%8))
(assert (= main.%8 fp.t1.x))
(assert (= fp.t1.x fp.t1.%0))
(assert (= fp.t1.x fp.t1.%1))
(assert (= fp.t1.mul (* fp.t1.%1 fp.t1.%0)))
(assert (= fp.t1.div (/ fp.t1.mul 2)))
(assert (= fp.t1.sub (+ 1 (* -1 fp.t1.div))))
(assert (= fp.t1.x fp.t1.%2))
(assert (= fp.t1.x fp.t1.%3))
(assert (= fp.t1.mul1 (* fp.t1.%3 fp.t1.%2)))
(assert (= fp.t1.x fp.t1.%4))
(assert (= fp.t1.mul2 (* fp.t1.%4 fp.t1.mul1)))
(assert (= fp.t1.x fp.t1.%5))
(assert (= fp.t1.mul3 (* fp.t1.%5 fp.t1.mul2)))
(assert (= fp.t1.div4 (/ fp.t1.mul3 24)))
(assert (= fp.t1.add (+ fp.t1.div4 fp.t1.sub)))
(assert (= fp.t1.x fp.t1.%6))
(assert (= fp.t1.x fp.t1.%7))
(assert (= fp.t1.mul5 (* fp.t1.%7 fp.t1.%6)))
(assert (= fp.t1.x fp.t1.%8))
(assert (= fp.t1.mul6 (* fp.t1.%8 fp.t1.mul5)))
(assert (= fp.t1.x fp.t1.%9))
(assert (= fp.t1.mul7 (* fp.t1.%9 fp.t1.mul6)))
(assert (= fp.t1.x fp.t1.%10))
(assert (= fp.t1.mul8 (* fp.t1.%10 fp.t1.mul7)))
(assert (= fp.t1.x fp.t1.%11))
(assert (= fp.t1.mul9 (* fp.t1.%11 fp.t1.mul8)))
(assert (= fp.t1.div10 (/ fp.t1.mul9 720)))
(assert (= fp.t1.add11 (+ fp.t1.div10 fp.t1.add)))
(assert (= main.call4 fp.t1.add11))
(assert (= main.div5 (/ main.call3 main.call4)))
(assert (= main.sub6 (+ main.%6 (* -1 main.div5))))
(assert (= main.sub6 main.%9))
(assert (= main.sub6 main.%10))
(assert (= main.%10 f.t2.x))
(assert (= f.t2.x f.t2.%0))
(assert (= f.t2.x f.t2.%1))
(assert (= f.t2.x f.t2.%2))
(assert (= f.t2.mul (* f.t2.%2 f.t2.%1)))
(assert (= f.t2.x f.t2.%3))
(assert (= f.t2.mul1 (* f.t2.%3 f.t2.mul)))
(assert (= f.t2.div (/ f.t2.mul1 6)))
(assert (= f.t2.sub (+ f.t2.%0 (* -1 f.t2.div))))
(assert (= f.t2.x f.t2.%4))
(assert (= f.t2.x f.t2.%5))
(assert (= f.t2.mul2 (* f.t2.%5 f.t2.%4)))
(assert (= f.t2.x f.t2.%6))
(assert (= f.t2.mul3 (* f.t2.%6 f.t2.mul2)))
(assert (= f.t2.x f.t2.%7))
(assert (= f.t2.mul4 (* f.t2.%7 f.t2.mul3)))
(assert (= f.t2.x f.t2.%8))
(assert (= f.t2.mul5 (* f.t2.%8 f.t2.mul4)))
(assert (= f.t2.div6 (/ f.t2.mul5 120)))
(assert (= f.t2.add (+ f.t2.div6 f.t2.sub)))
(assert (= f.t2.x f.t2.%9))
(assert (= f.t2.x f.t2.%10))
(assert (= f.t2.mul7 (* f.t2.%10 f.t2.%9)))
(assert (= f.t2.x f.t2.%11))
(assert (= f.t2.mul8 (* f.t2.%11 f.t2.mul7)))
(assert (= f.t2.x f.t2.%12))
(assert (= f.t2.mul9 (* f.t2.%12 f.t2.mul8)))
(assert (= f.t2.x f.t2.%13))
(assert (= f.t2.mul10 (* f.t2.%13 f.t2.mul9)))
(assert (= f.t2.x f.t2.%14))
(assert (= f.t2.mul11 (* f.t2.%14 f.t2.mul10)))
(assert (= f.t2.x f.t2.%15))
(assert (= f.t2.mul12 (* f.t2.%15 f.t2.mul11)))
(assert (= f.t2.div13 (/ f.t2.mul12 5040)))
(assert (= f.t2.add14 (+ f.t2.div13 f.t2.add)))
(assert (= main.call7 f.t2.add14))
(assert (= main.sub6 main.%11))
(assert (= main.%11 fp.t2.x))
(assert (= fp.t2.x fp.t2.%0))
(assert (= fp.t2.x fp.t2.%1))
(assert (= fp.t2.mul (* fp.t2.%1 fp.t2.%0)))
(assert (= fp.t2.div (/ fp.t2.mul 2)))
(assert (= fp.t2.sub (+ 1 (* -1 fp.t2.div))))
(assert (= fp.t2.x fp.t2.%2))
(assert (= fp.t2.x fp.t2.%3))
(assert (= fp.t2.mul1 (* fp.t2.%3 fp.t2.%2)))
(assert (= fp.t2.x fp.t2.%4))
(assert (= fp.t2.mul2 (* fp.t2.%4 fp.t2.mul1)))
(assert (= fp.t2.x fp.t2.%5))
(assert (= fp.t2.mul3 (* fp.t2.%5 fp.t2.mul2)))
(assert (= fp.t2.div4 (/ fp.t2.mul3 24)))
(assert (= fp.t2.add (+ fp.t2.div4 fp.t2.sub)))
(assert (= fp.t2.x fp.t2.%6))
(assert (= fp.t2.x fp.t2.%7))
(assert (= fp.t2.mul5 (* fp.t2.%7 fp.t2.%6)))
(assert (= fp.t2.x fp.t2.%8))
(assert (= fp.t2.mul6 (* fp.t2.%8 fp.t2.mul5)))
(assert (= fp.t2.x fp.t2.%9))
(assert (= fp.t2.mul7 (* fp.t2.%9 fp.t2.mul6)))
(assert (= fp.t2.x fp.t2.%10))
(assert (= fp.t2.mul8 (* fp.t2.%10 fp.t2.mul7)))
(assert (= fp.t2.x fp.t2.%11))
(assert (= fp.t2.mul9 (* fp.t2.%11 fp.t2.mul8)))
(assert (= fp.t2.div10 (/ fp.t2.mul9 720)))
(assert (= fp.t2.add11 (+ fp.t2.div10 fp.t2.add)))
(assert (= main.call8 fp.t2.add11))
(assert (= main.div9 (/ main.call7 main.call8)))
(assert (= main.sub10 (+ main.%9 (* -1 main.div9))))
(assert (= main.sub10 main.%12))
(assert (= main.%12 main.conv))
(assert (not (< main.conv 0.1)))


(check-sat)
(exit)
